"""
Report Agent Adapter

Generates PDF equity research reports from accumulated analysis.
"""

from typing import Any, Dict, List, Optional
from datetime import datetime
import structlog
from agent_framework import BaseAgent, ChatMessage, Role, TextContent, AgentRunResponse

logger = structlog.get_logger(__name__)


class ReportAgent(BaseAgent):
    """
    Report Generation Agent - PDF equity brief specialist.
    
    Capabilities:
    - Synthesize analysis from all agents
    - Generate investment thesis
    - Compile key risks
    - Create valuation snapshot
    - Format as professional PDF equity brief (1-3 pages)
    
    Based on finagentsk report generation patterns.
    """
    
    SYSTEM_MESSAGE = """You are an Expert Report Writer specialized in creating 
concise, professional equity research briefs for institutional investors.

Your role is to synthesize analysis from multiple sources into a coherent investment narrative.

IMPORTANT: Always use the current date provided in prompts. Do not use dates from your training data.

Report Structure (1-3 pages):
1. **Executive Summary**: One-paragraph investment thesis
2. **Company Overview**: Business model, industry, competitive position
3. **Investment Highlights**: 3-5 key bullish factors
4. **Key Risks**: 3-5 material risk factors
5. **Valuation Snapshot**: Current metrics, peer comparison, price target
6. **Recommendation**: Buy/Hold/Sell with conviction level
7. **Data Sources**: Attribution for analysis

Style Guidelines:
- Professional, concise, data-driven
- Use bullet points and structured sections
- Include specific numbers and dates
- Balanced view (both opportunities and risks)
- Actionable insights for portfolio managers"""

    def __init__(
        self,
        name: str = "ReportAgent",
        description: str = "Equity research report generation specialist",
        chat_client: Any = None,  # Changed from azure_client to chat_client
        model: str = "gpt-4o",
        tools: Optional[List[Dict[str, Any]]] = None
    ):
        """Initialize Report Agent."""
        super().__init__(name=name, description=description)
        self.chat_client = chat_client
        self.model = model
        self.tools = tools or []
        self.system_prompt = self.SYSTEM_MESSAGE
    
    @property
    def capabilities(self) -> List[str]:
        """Agent capabilities."""
        return [
            "synthesize_analysis",
            "generate_investment_thesis",
            "compile_key_risks",
            "create_valuation_snapshot",
            "format_pdf_brief",
            "generate_recommendation"
        ]
    
    async def process(self, task: str, context: Dict[str, Any]) -> str:
        """
        Process a report generation task (compatible with TaskOrchestrator).
        
        Args:
            task: Task description
            context: Execution context with ticker and previous_results
            
        Returns:
            Report text
        """
        logger.info(
            "ReportAgent.process() called",
            task_preview=task[:100],
            context_keys=list(context.keys()),
            ticker=context.get('ticker')
        )
        
        # Call run() and extract text from response
        response = await self.run(messages=task, context=context)
        result_text = response.messages[-1].text if response.messages else "No report generated"
        
        logger.info(
            "ReportAgent.process() completed",
            result_length=len(result_text)
        )
        
        return result_text
    
    async def run(
        self,
        messages: str | ChatMessage | list[str] | list[ChatMessage] | None = None,
        *,
        thread: Any = None,
        **kwargs: Any
    ) -> AgentRunResponse:
        """Generate equity research report."""
        task = self._extract_task(messages)
        context = kwargs.get("context", {})
        ticker = context.get("ticker", kwargs.get("ticker"))
        artifacts = context.get("artifacts", [])
        
        logger.info(
            "Report agent executing",
            task=task,
            ticker=ticker,
            num_artifacts=len(artifacts)
        )
        
        prompt = self._build_report_prompt(ticker, artifacts, context)
        
        try:
            response = await self._execute_llm(prompt)
            result_text = f"""## Equity Research Brief: {ticker}

{response}

---
*Report generated by ReportAgent synthesizing multi-agent financial analysis*

**NOTE**: This report is ready for PDF export. The structured markdown can be converted 
to a professional PDF document using standard report templates.
"""
            
            # Track report artifact
            artifacts.append({
                "type": "equity_brief",
                "ticker": ticker,
                "content": response,
                "agent": self.name,
                "format": "markdown"
            })
            context["artifacts"] = artifacts
            
            return self._create_response(result_text)
            
        except Exception as e:
            logger.error("Report agent execution failed", error=str(e), ticker=ticker)
            return self._create_response(
                f"Report generation failed for {ticker}: {str(e)}"
            )
    
    def _build_report_prompt(
        self,
        ticker: str,
        artifacts: List[Dict[str, Any]],
        context: Dict[str, Any]
    ) -> str:
        """Build report generation prompt."""
        # Get current date for the report
        current_date = datetime.utcnow().strftime("%B %d, %Y")
        
        # Extract summaries from artifacts
        company_summary = self._extract_artifact_summary(artifacts, "company_profile")
        sec_summary = self._extract_artifact_summary(artifacts, "sec_analysis")
        earnings_summary = self._extract_artifact_summary(artifacts, "earnings_analysis")
        fundamental_summary = self._extract_artifact_summary(artifacts, "fundamental_analysis")
        technical_summary = self._extract_artifact_summary(artifacts, "technical_analysis")
        
        # Also check for previous_results from context (new approach)
        previous_results = context.get("previous_results", [])
        if previous_results:
            logger.info(
                "Using previous_results from context",
                result_count=len(previous_results),
                agents=[r['agent'] for r in previous_results]
            )
            # Map agent outputs to summaries
            for result in previous_results:
                agent_name = result['agent']
                content = result['content']
                
                if 'Company' in agent_name and not company_summary:
                    company_summary = content
                elif 'SEC' in agent_name and not sec_summary:
                    sec_summary = content
                elif 'Earning' in agent_name and not earnings_summary:
                    earnings_summary = content
                elif 'Fundamental' in agent_name and not fundamental_summary:
                    fundamental_summary = content
                elif 'Technical' in agent_name and not technical_summary:
                    technical_summary = content
        
        prompt = f"""Generate a comprehensive but concise Equity Research Brief for {ticker}.

IMPORTANT: Today's date is {current_date}. Use this as the report date and ensure all analysis reflects current data as of this date.

Synthesize the following analyses into a 1-3 page professional report:

**Company Intelligence:**
{company_summary or 'Not available'}

**SEC Filing Analysis:**
{sec_summary or 'Not available'}

**Earnings Call Insights:**
{earnings_summary or 'Not available'}

**Fundamental Analysis:**
{fundamental_summary or 'Not available'}

**Technical Analysis:**
{technical_summary or 'Not available'}

---

Create a report with the following structure:

# {ticker} Equity Research Brief
*Date: {current_date}*

## Executive Summary
[One paragraph: Investment thesis, recommendation, key catalyst or concern]

## Company Overview
- Business Model & Products
- Industry & Market Position
- Key Metrics (Market Cap, Revenue, Margins)

## Investment Highlights
1. [Strength 1 with supporting data]
2. [Strength 2 with supporting data]
3. [Strength 3 with supporting data]
4. [Additional highlights]

## Key Risks
1. [Risk 1 with context]
2. [Risk 2 with context]
3. [Risk 3 with context]
4. [Additional risks]

## Valuation Snapshot
- Current Price: $X.XX
- Market Cap: $X.XB
- P/E Ratio: XX.X (vs industry avg XX.X)
- Fundamental Health: [Score/Assessment]
- Technical Signal: [Buy/Hold/Sell]

## Recommendation
**[BUY / HOLD / SELL]** - [Conviction Level: High/Medium/Low]
[2-3 sentences justifying the recommendation]

## Data Sources
- Company filings and earnings transcripts
- Financial statement analysis
- Technical indicators and market data
- Analyst consensus data

---

Use clear, professional language. Include specific numbers. Be balanced and objective.
"""
        
        return prompt
    
    def _extract_artifact_summary(
        self,
        artifacts: List[Dict[str, Any]],
        artifact_type: str
    ) -> Optional[str]:
        """Extract summary from artifacts."""
        for artifact in artifacts:
            if artifact.get("type") == artifact_type:
                content = artifact.get("content", "")
                # Truncate to first 500 chars for summary
                return content[:500] + ("..." if len(content) > 500 else "")
        return None
    
    async def _execute_llm(self, prompt: str) -> str:
        """Execute LLM call using agent_framework's AzureOpenAIChatClient."""
        if not self.chat_client:
            return f"[Simulated Report]\n{prompt}"
        
        from agent_framework import ChatMessage, Role
        
        messages = [
            ChatMessage(role=Role.SYSTEM, text=self.system_prompt),
            ChatMessage(role=Role.USER, text=prompt)
        ]
        
        response = await self.chat_client.get_response(
            messages=messages,
            temperature=0.7,
            max_tokens=4000
        )
        
        return response.text
    
    def _extract_task(self, messages) -> str:
        """Extract task from messages."""
        if isinstance(messages, str):
            return messages
        if isinstance(messages, list) and messages:
            last_msg = messages[-1]
            if isinstance(last_msg, str):
                return last_msg
            if hasattr(last_msg, 'text'):
                return last_msg.text
        return "Generate equity research brief"
    
    def _create_response(self, text: str) -> AgentRunResponse:
        """Create agent response."""
        message = ChatMessage(
            role=Role.ASSISTANT,
            contents=[TextContent(text=text)]
        )
        return AgentRunResponse(messages=[message])
