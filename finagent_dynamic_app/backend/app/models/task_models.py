"""
Task orchestration data models for finagent_dynamic_app.

These models support the Group Chat pattern, Planner Agent, and Hand-off workflow
inspired by finagentsk while using the Microsoft Agent Framework.
"""
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Literal, Optional
from uuid import uuid4

from pydantic import BaseModel, Field


# ============================================================================
# Enums
# ============================================================================

class DataType(str, Enum):
    """Type identifier for documents in CosmosDB."""
    SESSION = "session"
    PLAN = "plan"
    STEP = "step"
    MESSAGE = "message"


class AgentType(str, Enum):
    """Available agent types in the system."""
    PLANNER = "Planner_Agent"
    COMPANY = "Company_Agent"
    SEC = "SEC_Agent"
    EARNINGS = "EarningCall_Agent"
    FUNDAMENTALS = "Fundamentals_Agent"
    TECHNICALS = "Technicals_Agent"
    FORECASTER = "Forecaster_Agent"
    REPORT = "Report_Agent"
    SUMMARIZER = "Summarizer_Agent"
    GENERIC = "Generic_Agent"
    HUMAN = "Human_Agent"
    GROUP_CHAT_MANAGER = "GroupChatManager"


class StepStatus(str, Enum):
    """Status of a step in a plan."""
    PLANNED = "planned"
    AWAITING_FEEDBACK = "awaiting_feedback"
    APPROVED = "approved"
    REJECTED = "rejected"
    ACTION_REQUESTED = "action_requested"
    EXECUTING = "executing"
    COMPLETED = "completed"
    FAILED = "failed"


class PlanStatus(str, Enum):
    """Status of an overall plan."""
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class HumanFeedbackStatus(str, Enum):
    """Status of human feedback for a step."""
    REQUESTED = "requested"
    ACCEPTED = "accepted"
    REJECTED = "rejected"


# ============================================================================
# Base Models
# ============================================================================

class BaseDataModel(BaseModel):
    """Base model for all Cosmos DB documents."""
    
    id: str = Field(default_factory=lambda: str(uuid4()))
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class Session(BaseDataModel):
    """Represents a user session."""
    
    data_type: Literal[DataType.SESSION] = Field(default=DataType.SESSION)
    session_id: str
    user_id: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    last_active: datetime = Field(default_factory=datetime.utcnow)
    metadata: Optional[Dict[str, Any]] = None


# ============================================================================
# Plan & Step Models
# ============================================================================

class Plan(BaseDataModel):
    """
    Represents a high-level plan for accomplishing a user objective.
    Generated by the Planner Agent.
    """
    
    data_type: Literal[DataType.PLAN] = Field(default=DataType.PLAN)
    session_id: str
    user_id: str
    
    # Plan details
    initial_goal: str
    summary: Optional[str] = None
    overall_status: PlanStatus = PlanStatus.IN_PROGRESS
    
    # Human interaction
    human_clarification_request: Optional[str] = None
    human_clarification_response: Optional[str] = None
    
    # Metadata
    total_steps: int = 0
    completed_steps: int = 0
    failed_steps: int = 0
    
    # Financial context (optional)
    ticker: Optional[str] = None
    scope: Optional[List[str]] = None


class Step(BaseDataModel):
    """
    Represents a single step in a plan, assigned to a specific agent.
    """
    
    data_type: Literal[DataType.STEP] = Field(default=DataType.STEP)
    plan_id: str
    session_id: str
    user_id: str
    
    # Step details
    action: str  # What the agent should do
    agent: AgentType  # Which agent is responsible
    status: StepStatus = StepStatus.PLANNED
    
    # Execution results
    agent_reply: Optional[str] = None
    error_message: Optional[str] = None
    
    # Human feedback
    human_feedback: Optional[str] = None
    human_approval_status: HumanFeedbackStatus = HumanFeedbackStatus.REQUESTED
    updated_action: Optional[str] = None
    
    # Ordering
    order: Optional[int] = None
    
    # Dependencies and artifact requirements
    dependencies: List[str] = Field(default_factory=list)  # List of step IDs that must complete first
    required_artifacts: List[str] = Field(default_factory=list)  # Types of artifacts needed (e.g., "news", "recommendations")
    tools: List[str] = Field(default_factory=list)  # Specific tools/functions to call


class AgentMessage(BaseDataModel):
    """
    Represents a message in the agent conversation history.
    """
    
    data_type: Literal[DataType.MESSAGE] = Field(default=DataType.MESSAGE)
    session_id: str
    user_id: str
    plan_id: str
    step_id: Optional[str] = None
    
    # Message content
    content: str
    source: str  # Agent name or "Human"
    target: Optional[str] = None  # Target agent (for directed messages)
    
    # Message type/metadata
    message_type: Optional[str] = None  # e.g., "action_request", "response", "clarification"
    metadata: Optional[Dict[str, Any]] = None


# ============================================================================
# Request/Response Models (for API)
# ============================================================================

class InputTask(BaseModel):
    """User input to create a new plan."""
    
    session_id: Optional[str] = None  # Auto-generated if not provided
    user_id: Optional[str] = None  # Auto-populated from authentication
    description: str
    
    # Optional financial context
    ticker: Optional[str] = None
    scope: Optional[List[str]] = None
    depth: Optional[str] = None


class HumanFeedback(BaseModel):
    """Human feedback on a step or plan."""
    
    step_id: Optional[str] = None  # If None, applies to all steps
    plan_id: str
    session_id: str
    approved: bool
    human_feedback: Optional[str] = None
    updated_action: Optional[str] = None


class HumanClarification(BaseModel):
    """Human clarification on a plan."""
    
    plan_id: str
    session_id: str
    human_clarification: str


class ActionRequest(BaseModel):
    """Request sent to an agent to perform an action."""
    
    step_id: str
    plan_id: str
    session_id: str
    action: str
    agent: AgentType
    context: Optional[Dict[str, Any]] = None  # Additional context from previous steps


class ActionResponse(BaseModel):
    """Response from an agent after executing an action."""
    
    step_id: str
    plan_id: str
    session_id: str
    success: bool
    result: Optional[str] = None
    error: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None


class ApprovalRequest(BaseModel):
    """Request to human for step approval."""
    
    step_id: str
    plan_id: str
    session_id: str
    user_id: str
    action: str
    agent_id: str


# ============================================================================
# Planner-specific Models (for structured output)
# ============================================================================

class PlannerStepOutput(BaseModel):
    """Single step in a planner's output."""
    
    action: str
    agent: str  # Will be mapped to AgentType


class PlannerResponsePlan(BaseModel):
    """Structured output from the Planner Agent."""
    
    initial_goal: str
    summary_plan_and_steps: str
    human_clarification_request: Optional[str] = None
    steps: List[PlannerStepOutput]


# ============================================================================
# API Response Models
# ============================================================================

class PlanWithSteps(BaseModel):
    """Plan with its associated steps (for API responses)."""
    
    # Plan fields
    id: str
    session_id: str
    user_id: str
    initial_goal: str
    summary: Optional[str]
    overall_status: PlanStatus
    human_clarification_request: Optional[str]
    human_clarification_response: Optional[str]
    total_steps: int
    completed_steps: int
    failed_steps: int
    timestamp: datetime
    
    # Financial context
    ticker: Optional[str] = None
    scope: Optional[List[str]] = None
    
    # Associated steps
    steps: List[Step] = []
    
    # Computed fields
    steps_requiring_approval: int = 0
    completed: int = 0


class TaskListItem(BaseModel):
    """Simplified task info for list views."""
    
    id: str
    session_id: str
    initial_goal: str
    overall_status: PlanStatus
    total_steps: int
    completed_steps: int
    timestamp: datetime
    ticker: Optional[str] = None


# ============================================================================
# Helper Functions
# ============================================================================

def agent_type_from_string(agent_str: str) -> AgentType:
    """Convert string to AgentType enum."""
    try:
        return AgentType(agent_str)
    except ValueError:
        # Map common variations
        mapping = {
            "company": AgentType.COMPANY,
            "sec": AgentType.SEC,
            "earnings": AgentType.EARNINGS,
            "earningcall": AgentType.EARNINGS,
            "fundamental": AgentType.FUNDAMENTALS,
            "fundamentals": AgentType.FUNDAMENTALS,
            "technical": AgentType.TECHNICALS,
            "technicals": AgentType.TECHNICALS,
            "forecaster": AgentType.FORECASTER,
            "report": AgentType.REPORT,
            "generic": AgentType.GENERIC,
            "human": AgentType.HUMAN,
            "planner": AgentType.PLANNER,
        }
        return mapping.get(agent_str.lower(), AgentType.GENERIC)
