"""
Workflow Usage Examples - Foundation Framework

This module demonstrates how to use YAML-based workflows for
declarative multi-agent orchestration with the framework.
"""

import asyncio
import sys
import platform
import warnings
import logging
from pathlib import Path
from typing import Dict, Any

# Suppress aiohttp ClientSession warnings
warnings.filterwarnings("ignore", message="Unclosed client session")
warnings.filterwarnings("ignore", category=ResourceWarning, message="unclosed.*<ssl.SSLSocket.*>")

# Suppress asyncio error logging for unclosed resources
logging.getLogger('asyncio').setLevel(logging.CRITICAL)

# Fix for Windows event loop issue with aiodns
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# Add the parent directory to Python path to import from local source
parent_dir = Path(__file__).parent.parent.parent
if str(parent_dir) not in sys.path:
    sys.path.insert(0, str(parent_dir))

# Import the framework components from local source
try:
    from magentic_foundation import (
        MagenticFoundation,
        create_app,
    )
    from magentic_foundation.workflows.engine import WorkflowEngine
    print("‚úÖ Successfully imported from local source")
except ImportError as e:
    print(f"‚ùå Failed to import from local source: {e}")
    print(f"Current working directory: {Path.cwd()}")
    print(f"Directory added to path: {parent_dir}")
    sys.exit(1)


async def load_workflow_example():
    """
    Example: Load and inspect workflow definitions from YAML files.
    """
    print("=" * 60)
    print("LOAD WORKFLOW EXAMPLE")
    print("=" * 60)
    
    try:
        # Initialize the framework
        app = create_app()
        await app.initialize()
        
        # Get the workflow engine
        workflow_engine = app.workflow_engine
        
        # Discover workflow files
        workflow_dir = Path(__file__).parent / "workflows"
        workflow_files = list(workflow_dir.glob("*.yaml"))
        
        print(f"Workflow directory: {workflow_dir}")
        print(f"Found {len(workflow_files)} workflow definition(s):")
        print()
        
        # Load and display each workflow
        for workflow_file in workflow_files:
            print(f"üìÑ {workflow_file.name}")
            
            try:
                # Register workflow from file - this internally loads it
                await workflow_engine.register_workflow(str(workflow_file))
                
                # List all workflows to find the one we just registered
                all_workflows = await workflow_engine.list_workflows()
                
                # Find the workflow by looking for the most recently added one
                # or by matching the file name pattern
                workflow = None
                for wf in all_workflows:
                    if workflow_file.stem in wf.name or wf.name in workflow_file.stem:
                        workflow = wf
                        break
                
                # If still not found, just take the last one if we only have one workflow
                if not workflow and len(all_workflows) == 1:
                    workflow = all_workflows[0]
                
                if workflow:
                    print(f"   ‚Ä¢ Name: {workflow.name}")
                    print(f"   ‚Ä¢ Version: {workflow.version}")
                    print(f"   ‚Ä¢ Description: {workflow.description}")
                    print(f"   ‚Ä¢ Tasks: {len(workflow.tasks)}")
                    print(f"   ‚Ä¢ Variables: {len(workflow.variables)}")
                    timeout_str = f"{workflow.timeout} seconds" if workflow.timeout else "Not set"
                    print(f"   ‚Ä¢ Timeout: {timeout_str}")
                    print(f"   ‚Ä¢ Max parallel tasks: {workflow.max_parallel_tasks}")
                    
                    # Show task structure
                    print(f"   ‚Ä¢ Task flow:")
                    for i, task in enumerate(workflow.tasks, 1):
                        task_type = task.type if hasattr(task, 'type') else 'unknown'
                        task_name = task.name if hasattr(task, 'name') else task.id
                        print(f"      {i}. {task_name} ({task_type})")
                else:
                    print(f"   ‚ö† Could not retrieve workflow after registration")
                
                print()
                
            except Exception as e:
                print(f"   ‚ö† Error loading workflow: {e}")
                import traceback
                traceback.print_exc()
                print()
        
        await app.shutdown()
        print("‚úÖ Workflow loading example completed\n")
        
    except Exception as e:
        print(f"‚ùå Error in workflow loading example: {e}")
        import traceback
        traceback.print_exc()


async def register_workflow_example():
    """
    Example: Register workflows for execution.
    """
    print("=" * 60)
    print("REGISTER WORKFLOW EXAMPLE")
    print("=" * 60)
    
    try:
        # Initialize the framework
        app = create_app()
        await app.initialize()
        
        workflow_engine = app.workflow_engine
        workflow_dir = Path(__file__).parent / "workflows"
        
        # Register workflows
        registered_count = 0
        workflow_files = list(workflow_dir.glob("*.yaml"))
        
        for workflow_file in workflow_files:
            try:
                await workflow_engine.register_workflow(str(workflow_file))
                registered_count += 1
                workflow_name = workflow_file.stem
                print(f"‚úì Registered: {workflow_name}")
            except Exception as e:
                print(f"‚ö† Failed to register {workflow_file.name}: {e}")
        
        print()
        print(f"‚úì Successfully registered {registered_count} workflow(s)")
        
        # List registered workflows
        registered = await workflow_engine.list_workflows()
        print(f"‚úì Total workflows in registry: {len(registered)}")
        print()
        
        print("Registered workflows:")
        for workflow in registered:
            print(f"  ‚Ä¢ {workflow.name}: {workflow.description} (v{workflow.version})")
        
        await app.shutdown()
        print("\n‚úÖ Workflow registration example completed\n")
        
    except Exception as e:
        print(f"‚ùå Error in workflow registration example: {e}")
        import traceback
        traceback.print_exc()


async def workflow_execution_demo():
    """
    Example: Demonstrate workflow execution capabilities.
    
    Note: This is a demonstration of the workflow structure.
    Actual execution requires registered agents that match the workflow tasks.
    """
    print("=" * 60)
    print("WORKFLOW EXECUTION DEMO")
    print("=" * 60)
    
    try:
        # Initialize the framework
        app = create_app()
        await app.initialize()
        
        workflow_engine = app.workflow_engine
        
        print("Workflow Execution Capabilities:")
        print()
        
        print("‚úì Sequential task execution")
        print("  ‚Üí Tasks execute in defined order")
        print("  ‚Üí Output from one task becomes input to next")
        print()
        
        print("‚úì Parallel task execution")
        print("  ‚Üí Multiple tasks run concurrently")
        print("  ‚Üí Configurable max parallel tasks")
        print("  ‚Üí Results aggregated after completion")
        print()
        
        print("‚úì Conditional task execution")
        print("  ‚Üí Tasks execute based on conditions")
        print("  ‚Üí Supports complex logic (AND, OR, NOT)")
        print("  ‚Üí Dynamic workflow paths")
        print()
        
        print("‚úì Error handling and retries")
        print("  ‚Üí Automatic retry on failure")
        print("  ‚Üí Configurable retry attempts and delays")
        print("  ‚Üí Fallback task execution")
        print()
        
        print("‚úì Variable interpolation")
        print("  ‚Üí Dynamic parameter substitution")
        print("  ‚Üí Access to previous task outputs")
        print("  ‚Üí Environment variable support")
        print()
        
        print("‚úì Timeout management")
        print("  ‚Üí Workflow-level timeouts")
        print("  ‚Üí Task-level timeouts")
        print("  ‚Üí Graceful cancellation")
        print()
        
        print("Example workflow structure:")
        print("  1. Validate inputs ‚Üí Check data quality")
        print("  2. Process data (parallel) ‚Üí Transform, enrich, analyze")
        print("  3. Aggregate results ‚Üí Combine outputs")
        print("  4. Generate report ‚Üí Create final deliverable")
        print()
        
        print("üí° To execute workflows:")
        print("  ‚Ä¢ Register agents that match workflow task definitions")
        print("  ‚Ä¢ Provide required input variables")
        print("  ‚Ä¢ Call: workflow_engine.execute_workflow(workflow_id, inputs)")
        print()
        
        print("üìñ See workflow definitions in: examples/workflows/")
        print("  ‚Ä¢ customer_service.yaml - Customer support automation")
        print("  ‚Ä¢ data_processing.yaml - Data pipeline with parallel tasks")
        
        await app.shutdown()
        print("\n‚úÖ Workflow execution demo completed\n")
        
    except Exception as e:
        print(f"‚ùå Error in workflow execution demo: {e}")
        import traceback
        traceback.print_exc()


async def workflow_monitoring_example():
    """
    Example: Monitor workflow execution status and metrics.
    """
    print("=" * 60)
    print("WORKFLOW MONITORING EXAMPLE")
    print("=" * 60)
    
    try:
        # Initialize the framework
        app = create_app()
        await app.initialize()
        
        workflow_engine = app.workflow_engine
        
        print("Workflow Monitoring Features:")
        print()
        
        print("‚úì Execution status tracking")
        print("  ‚Üí Real-time workflow state (pending, running, completed, failed)")
        print("  ‚Üí Individual task status monitoring")
        print("  ‚Üí Progress percentage calculation")
        print()
        
        print("‚úì Performance metrics")
        print("  ‚Üí Execution time per task")
        print("  ‚Üí Total workflow duration")
        print("  ‚Üí Resource utilization")
        print()
        
        print("‚úì Error tracking")
        print("  ‚Üí Failed task identification")
        print("  ‚Üí Error messages and stack traces")
        print("  ‚Üí Retry attempt history")
        print()
        
        print("‚úì Audit logging")
        print("  ‚Üí Complete execution history")
        print("  ‚Üí Input/output data capture")
        print("  ‚Üí User and timestamp information")
        print()
        
        print("Available monitoring methods:")
        print("  ‚Ä¢ get_execution_status(execution_id)")
        print("  ‚Ä¢ get_execution_history(workflow_id)")
        print("  ‚Ä¢ get_workflow_metrics(workflow_id)")
        print("  ‚Ä¢ list_active_executions()")
        
        await app.shutdown()
        print("\n‚úÖ Workflow monitoring example completed\n")
        
    except Exception as e:
        print(f"‚ùå Error in workflow monitoring example: {e}")
        import traceback
        traceback.print_exc()


def print_usage_help():
    """Print usage help and available examples."""
    print("Foundation Framework - Workflow Usage Examples")
    print("=" * 60)
    print()
    print("Available examples:")
    print("  1. Load Workflow - Load and inspect YAML workflow definitions")
    print("  2. Register Workflow - Register workflows for execution")
    print("  3. Execution Demo - Understand workflow execution capabilities")
    print("  4. Monitoring - Learn about workflow monitoring features")
    print()
    print("Workflow files location:")
    print("  examples/workflows/")
    print("    ‚Ä¢ customer_service.yaml")
    print("    ‚Ä¢ data_processing.yaml")
    print()
    print("Prerequisites:")
    print("  - Azure OpenAI endpoint and API key configured in environment")
    print("  - Workflow YAML files in examples/workflows/ directory")
    print("  - Agents registered that match workflow task definitions")
    print()


async def main():
    """Main function to run all workflow examples."""
    print_usage_help()
    
    # Run all examples
    examples = [
        ("Load Workflow Example", load_workflow_example),
        ("Register Workflow Example", register_workflow_example),
        ("Workflow Execution Demo", workflow_execution_demo),
        ("Workflow Monitoring Example", workflow_monitoring_example),
    ]
    
    for name, example_func in examples:
        print(f"\nüöÄ Running {name}...")
        print("=" * 60)
        await example_func()
        print("=" * 60)
    
    print("\n‚úÖ All workflow examples completed!")
    print("\nüìö Next steps:")
    print("  ‚Ä¢ Review the workflow YAML files in examples/workflows/")
    print("  ‚Ä¢ Create your own workflow definitions")
    print("  ‚Ä¢ Register agents that implement the workflow tasks")
    print("  ‚Ä¢ Execute workflows with: workflow_engine.execute_workflow()")


if __name__ == "__main__":
    asyncio.run(main())
