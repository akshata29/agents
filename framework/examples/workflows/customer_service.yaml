# Example Workflow - Customer Service Automation
# This workflow demonstrates multi-agent orchestration for customer support

name: customer_service_automation
version: "1.0"
description: "Automated customer service workflow with multiple specialized agents"

variables:
  - name: customer_id
    type: string
    required: true
    description: "Customer identifier"
  
  - name: inquiry_type
    type: string
    required: true
    description: "Type of customer inquiry (billing, technical, general)"
  
  - name: priority
    type: string
    default: "normal"
    description: "Inquiry priority level (low, normal, high, critical)"
  
  - name: customer_data
    type: object
    description: "Customer information retrieved from systems"
  
  - name: resolution_plan
    type: object
    description: "Generated resolution plan"

timeout: 1800  # 30 minutes
max_parallel_tasks: 3

tasks:
  # Step 1: Validate and fetch customer information
  - id: validate_customer
    name: "Validate Customer"
    type: agent
    agent: "customer_validation_agent"
    parameters:
      customer_id: "${customer_id}"
    outputs:
      customer_data: customer_data
      is_valid: is_valid_customer
    retry:
      max_attempts: 3
      delay_seconds: 2
  
  # Step 2: Classify the inquiry
  - id: classify_inquiry
    name: "Classify Customer Inquiry"
    type: agent
    agent: "inquiry_classification_agent"
    depends_on: ["validate_customer"]
    condition:
      variable: is_valid_customer
      operator: equals
      value: true
    parameters:
      inquiry_type: "${inquiry_type}"
      customer_data: "${customer_data}"
    outputs:
      category: inquiry_category
      urgency: inquiry_urgency
      suggested_resolution: suggested_resolution
  
  # Step 3: Route to appropriate specialist (parallel execution)
  - id: billing_specialist
    name: "Billing Specialist Review"
    type: agent
    agent: "billing_specialist_agent"
    depends_on: ["classify_inquiry"]
    condition:
      variable: inquiry_category
      operator: contains
      value: "billing"
    parameters:
      customer_data: "${customer_data}"
      inquiry_details: "${suggested_resolution}"
    outputs:
      billing_analysis: billing_analysis
      billing_recommendations: billing_recommendations
  
  - id: technical_specialist
    name: "Technical Specialist Review"
    type: agent
    agent: "technical_specialist_agent"
    depends_on: ["classify_inquiry"]
    condition:
      variable: inquiry_category
      operator: contains
      value: "technical"
    parameters:
      customer_data: "${customer_data}"
      inquiry_details: "${suggested_resolution}"
    outputs:
      technical_analysis: technical_analysis
      technical_recommendations: technical_recommendations
  
  # Step 4: Generate comprehensive resolution plan
  - id: create_resolution_plan
    name: "Create Resolution Plan"
    type: agent
    agent: "resolution_planning_agent"
    depends_on: ["billing_specialist", "technical_specialist"]
    parameters:
      customer_data: "${customer_data}"
      inquiry_category: "${inquiry_category}"
      billing_analysis: "${billing_analysis}"
      technical_analysis: "${technical_analysis}"
      priority: "${priority}"
    outputs:
      resolution_plan: resolution_plan
      estimated_resolution_time: estimated_time
  
  # Step 5: Execute resolution actions (parallel)
  - id: execute_resolution_actions
    name: "Execute Resolution Actions"
    type: parallel
    depends_on: ["create_resolution_plan"]
    tasks:
      # Update customer records
      - id: update_records
        name: "Update Customer Records"
        type: mcp_tool
        tool: "update_customer_records"
        parameters:
          customer_id: "${customer_id}"
          updates: "${resolution_plan.record_updates}"
      
      # Send notifications
      - id: send_notifications
        name: "Send Customer Notifications"
        type: mcp_tool
        tool: "send_customer_notification"
        parameters:
          customer_id: "${customer_id}"
          notification_type: "resolution_update"
          content: "${resolution_plan.customer_message}"
      
      # Log case details
      - id: log_case
        name: "Log Case Resolution"
        type: function
        function: "log"
        parameters:
          message: "Customer service case resolved for ${customer_id}"
          level: "info"
  
  # Step 6: Quality assurance check
  - id: quality_check
    name: "Quality Assurance Review"
    type: agent
    agent: "quality_assurance_agent"
    depends_on: ["execute_resolution_actions"]
    condition:
      variable: priority
      operator: equals
      value: "high"
    parameters:
      resolution_plan: "${resolution_plan}"
      customer_feedback: "${customer_data.recent_feedback}"
    outputs:
      qa_score: quality_score
      qa_recommendations: qa_recommendations
  
  # Step 7: Follow-up scheduling (conditional)
  - id: schedule_followup
    name: "Schedule Follow-up"
    type: mcp_tool
    tool: "schedule_customer_followup"
    depends_on: ["quality_check"]
    condition:
      variable: quality_score
      operator: less_than
      value: 8
    parameters:
      customer_id: "${customer_id}"
      followup_type: "quality_improvement"
      scheduled_date: "${resolution_plan.followup_date}"

metadata:
  created_by: "Customer Service Team"
  version: "1.0"
  tags: ["customer-service", "automation", "multi-agent"]
  last_updated: "2024-01-15"