"""
Task orchestration data models for multimodal_insights_app.

These models support multimodal file processing, analysis, and insights generation
using the Microsoft Agent Framework patterns.
"""
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Literal, Optional
from uuid import uuid4

from pydantic import BaseModel, Field


# ============================================================================
# Enums
# ============================================================================

class DataType(str, Enum):
    """Type identifier for documents in CosmosDB."""
    SESSION = "session"
    PLAN = "plan"
    STEP = "step"
    MESSAGE = "message"
    FILE_METADATA = "file_metadata"
    EXTRACTED_CONTENT = "extracted_content"


class AgentType(str, Enum):
    """Available agent types in the system."""
    PLANNER = "Planner_Agent"
    MULTIMODAL_PROCESSOR = "MultimodalProcessor_Agent"
    SENTIMENT = "Sentiment_Agent"
    SUMMARIZER = "Summarizer_Agent"
    ANALYTICS = "Analytics_Agent"
    GENERIC = "Generic_Agent"
    HUMAN = "Human_Agent"
    GROUP_CHAT_MANAGER = "GroupChatManager"


class FileType(str, Enum):
    """Supported file types for multimodal processing."""
    AUDIO = "audio"
    VIDEO = "video"
    PDF = "pdf"
    UNKNOWN = "unknown"


class ProcessingStatus(str, Enum):
    """Status of file processing."""
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"


class StepStatus(str, Enum):
    """Status of a step in a plan."""
    PLANNED = "planned"
    EXECUTING = "executing"
    COMPLETED = "completed"
    FAILED = "failed"


class PlanStatus(str, Enum):
    """Status of an overall plan."""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


# ============================================================================
# Base Models
# ============================================================================

class BaseDataModel(BaseModel):
    """Base model for all Cosmos DB documents."""
    
    id: str = Field(default_factory=lambda: str(uuid4()))
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    
    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }


class Session(BaseDataModel):
    """Represents a user session."""
    
    data_type: Literal[DataType.SESSION] = Field(default=DataType.SESSION)
    session_id: str
    user_id: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    last_active: datetime = Field(default_factory=datetime.utcnow)
    metadata: Optional[Dict[str, Any]] = None


# ============================================================================
# File Models
# ============================================================================

class FileMetadata(BaseDataModel):
    """Metadata about an uploaded file."""
    
    data_type: Literal[DataType.FILE_METADATA] = Field(default=DataType.FILE_METADATA)
    session_id: str
    user_id: str
    
    # File details
    filename: str
    file_type: FileType
    file_size: int  # in bytes
    mime_type: str
    file_path: str  # Path where file is stored
    
    # Processing status
    processing_status: ProcessingStatus = ProcessingStatus.PENDING
    processed_at: Optional[datetime] = None
    
    # Extracted content reference
    extracted_content_id: Optional[str] = None
    
    # Metadata
    metadata: Optional[Dict[str, Any]] = None


class ExtractedContent(BaseDataModel):
    """Extracted content from a processed file."""
    
    data_type: Literal[DataType.EXTRACTED_CONTENT] = Field(default=DataType.EXTRACTED_CONTENT)
    session_id: str
    user_id: str
    file_metadata_id: str
    
    # Content
    text_content: Optional[str] = None
    structured_data: Optional[Dict[str, Any]] = None
    
    # For audio/video
    transcription: Optional[str] = None
    speaker_diarization: Optional[List[Dict[str, Any]]] = None
    audio_metadata: Optional[Dict[str, Any]] = None
    
    # For PDF
    document_structure: Optional[Dict[str, Any]] = None
    tables: Optional[List[Dict[str, Any]]] = None
    key_value_pairs: Optional[Dict[str, Any]] = None
    
    # General metadata
    language: Optional[str] = None
    confidence_score: Optional[float] = None
    extraction_metadata: Optional[Dict[str, Any]] = None


# ============================================================================
# Plan & Step Models
# ============================================================================

class Plan(BaseDataModel):
    """
    Represents a high-level plan for accomplishing a user objective.
    Generated by the Planner Agent.
    """
    
    data_type: Literal[DataType.PLAN] = Field(default=DataType.PLAN)
    session_id: str
    user_id: str
    
    # Plan details
    initial_goal: str
    summary: Optional[str] = None
    overall_status: PlanStatus = PlanStatus.PENDING
    
    # Associated files
    file_ids: List[str] = Field(default_factory=list)
    
    # Metadata
    total_steps: int = 0
    completed_steps: int = 0
    failed_steps: int = 0
    metadata: Optional[Dict[str, Any]] = None


class Step(BaseDataModel):
    """
    Represents a single step in a plan, assigned to a specific agent.
    """
    
    data_type: Literal[DataType.STEP] = Field(default=DataType.STEP)
    plan_id: str
    session_id: str
    user_id: str
    
    # Step details
    action: str  # What the agent should do
    agent: AgentType  # Which agent is responsible
    status: StepStatus = StepStatus.PLANNED
    
    # Execution results
    agent_reply: Optional[str] = None
    error_message: Optional[str] = None
    
    # Ordering
    order: Optional[int] = None
    
    # Dependencies and artifact requirements
    dependencies: List[str] = Field(default_factory=list)
    required_artifacts: List[str] = Field(default_factory=list)
    tools: List[str] = Field(default_factory=list)
    
    # Associated files
    file_ids: List[str] = Field(default_factory=list)
    
    # Step-specific parameters (e.g., summary type, persona, analysis focus)
    parameters: Optional[Dict[str, Any]] = None


class AgentMessage(BaseDataModel):
    """
    Represents a message in the agent conversation history.
    """
    
    data_type: Literal[DataType.MESSAGE] = Field(default=DataType.MESSAGE)
    session_id: str
    user_id: str
    plan_id: str
    step_id: Optional[str] = None
    
    # Message content
    content: str
    source: str  # Agent name or "Human"
    target: Optional[str] = None
    
    # Message type/metadata
    message_type: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None


# ============================================================================
# Request/Response Models (for API)
# ============================================================================

class InputTask(BaseModel):
    """User input to create a new plan."""
    
    session_id: Optional[str] = None
    user_id: Optional[str] = None
    description: str
    file_ids: Optional[List[str]] = Field(default_factory=list)
    metadata: Optional[Dict[str, Any]] = None
    
    # User preferences for summary generation
    summary_type: Optional[str] = Field(
        default="detailed",
        description="Type of summary: brief, detailed, or comprehensive"
    )
    persona: Optional[str] = Field(
        default="executive",
        description="Target audience persona: executive, technical, or general"
    )


class ActionRequest(BaseModel):
    """Request sent to an agent to perform an action."""
    
    step_id: str
    plan_id: str
    session_id: str
    action: str
    agent: AgentType
    context: Optional[Dict[str, Any]] = None


class ActionResponse(BaseModel):
    """Response from an agent after executing an action."""
    
    step_id: str
    plan_id: str
    session_id: str
    success: bool
    result: Optional[str] = None
    error: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None


class PlanWithSteps(BaseModel):
    """Plan with all its steps."""
    
    id: str
    session_id: str
    user_id: str
    initial_goal: str
    summary: Optional[str] = None
    overall_status: PlanStatus
    file_ids: List[str] = Field(default_factory=list)
    total_steps: int
    completed_steps: int
    failed_steps: int
    timestamp: datetime
    steps: List[Step] = Field(default_factory=list)


class TaskListItem(BaseModel):
    """Summary item for task list view."""
    
    plan_id: str
    session_id: str
    initial_goal: str
    overall_status: PlanStatus
    total_steps: int
    completed_steps: int
    timestamp: datetime
    file_count: int = 0


class UploadedFile(BaseModel):
    """Response for uploaded file."""
    
    file_id: str
    filename: str
    file_type: FileType
    file_size: int
    processing_status: ProcessingStatus


class ExportRequest(BaseModel):
    """Request to export results."""
    
    session_id: str
    plan_id: str
    format: Literal["markdown", "pdf", "json"]
    include_steps: bool = True
    include_messages: bool = True


class ExecutionStatusResponse(BaseModel):
    """Real-time execution status response."""
    
    plan_id: str
    session_id: str
    overall_status: PlanStatus
    current_step: Optional[str] = None
    current_agent: Optional[str] = None
    completed_steps: int
    total_steps: int
    progress_percentage: float
    recent_messages: List[str] = Field(default_factory=list)


class FileUploadResponse(BaseModel):
    """Response for file upload operations."""
    
    status: str
    message: str
    data: Dict[str, Any]


class PlanExecutionResponse(BaseModel):
    """Response for plan creation and execution operations."""
    
    status: str
    message: str
    data: Dict[str, Any]

